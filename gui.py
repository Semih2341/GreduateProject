# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from multiprocessing import Process
import multiprocess
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import Onuunkod as VoicePart
import GestureOperations as go
import main as mainScript
import VoiceThread as vt
import Gestures
import GestureThread as gt
import pyautogui
from time import sleep
import pickle


class GUIPages:
    def __init__(self):
        self.voiceDropButtonName = "bırak"
        self.voiceHoldButtonName = "tut"
        self.voiceLeftButtonName = "domates"
        self.voiceRightButtonName = "salam"
        self.voiceDoubleClickButtonName = "çift tıkla"
        self.gestureDoubleClick = Gestures.Gestures.BOTHEYEBLINK
        self.gestureHold = Gestures.Gestures.MOUTHOPEN
        self.gestureLeftClick = Gestures.Gestures.LEFTBLINK
        self.gestureRightClick = Gestures.Gestures.RIGHTBLINK
        self.voiceThreadInstance = VoicePart.VoiceDetection(rightVoice=self.voiceRightButtonName,
                                                            leftVoice=self.voiceLeftButtonName,
                                                            holdVoice=self.voiceHoldButtonName,
                                                            dropVoice=self.voiceDropButtonName,
                                                            doubleVoice=self.voiceDoubleClickButtonName)
        self.voice_thread = Process(target=self.voiceThreadInstance.start)

        self.gestureThreadInstance = gt.GestureThread(lefClickGesture=self.gestureLeftClick,
                                                      rightClickGesture=self.gestureRightClick,
                                                      dragGesture=self.gestureHold,
                                                      doubleClickGesture=self.gestureDoubleClick)
        # self.pickleGesture = pickle.dump(self.gestureThreadInstance.start())
        # self.pickleLoadGesture = pickle.load(self.pickleGesture)

    def Divider(self, x):
        if x == 0:
            return "Left Blink"
        elif x == 1:
            return "Right Blink"
        elif x == 2:
            return "Both Eye Blink"
        elif x == 3:
            return "Mouth Open"

    def VoiceMenuCommandSectionPopUp(self):

        voiceCanvas.create_rectangle(
            292.0,
            198.0,
            631.0,
            314.0,
            fill="#F1ECEC",
            outline="")

        image_image_2 = PhotoImage(
            file="assets/frame6/image_2.png")
        image_2 = voiceCanvas.create_image(
            462.0,
            273.0,
            image=image_image_2
        )

        entry_image_1 = PhotoImage(
            file="assets/frame6/entry_1.png")
        entry_bg_1 = voiceCanvas.create_image(
            462.0,
            223.0,
            image=entry_image_1
        )
        voiceWindow.mainloop()

    def ButtonCheckerGesture(self, buttonPosition, buttonText):

        if buttonPosition == 315:
            if buttonText == self.gestureHold:
                self.gestureHold = self.gestureDoubleClick
            elif buttonText == self.gestureRightClick:
                self.gestureRightClick = self.gestureDoubleClick
            elif buttonText == self.gestureLeftClick:
                self.gestureLeftClick = self.gestureDoubleClick
            self.gestureDoubleClick = buttonText

        elif buttonPosition == 269:
            if buttonText == self.gestureDoubleClick:
                self.gestureDoubleClick = self.gestureHold
            elif buttonText == self.gestureLeftClick:
                self.gestureLeftClick = self.gestureHold
            elif buttonText == self.gestureRightClick:
                self.gestureRightClick = self.gestureHold
            self.gestureHold = buttonText

        elif buttonPosition == 223:
            if buttonText == self.gestureDoubleClick:
                self.gestureDoubleClick = self.gestureLeftClick
            elif buttonText == self.gestureHold:
                self.gestureHold = self.gestureLeftClick
            elif buttonText == self.gestureRightClick:
                self.gestureRightClick = self.gestureLeftClick
            self.gestureLeftClick = buttonText

        elif buttonPosition == 177:
            if buttonText == self.gestureDoubleClick:
                self.gestureDoubleClick = self.gestureRightClick
            elif buttonText == self.gestureHold:
                self.gestureHold = self.gestureRightClick
            elif buttonText == self.gestureLeftClick:
                self.gestureLeftClick = self.gestureRightClick
            self.gestureRightClick = buttonText

    def ChangeButtonNamesGestures(self, buttonPosition, buttonText):

        if not self.gestureThreadInstance.is_alive():
            print("kapalı")
            sleep(0.1)
        print(buttonText)

        self.ButtonCheckerGesture(buttonPosition, buttonText)

        self.gestureThreadInstance = gt.GestureThread(lefClickGesture=self.gestureLeftClick,
                                                      rightClickGesture=self.gestureRightClick,
                                                      dragGesture=self.gestureHold,
                                                      doubleClickGesture=self.gestureDoubleClick)
        self.gestureThreadInstance.start()
        button = Button(
            bg="#FFFFFF",
            text=self.Divider(buttonText.value),
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.gestureThreadInstance.stop(), self.GestureCommandSectionPopUp(buttonPosition)],
            relief="flat"
        )
        button.place(
            x=755,
            y=buttonPosition,
            width=98,
            height=28
        )

    def GestureCommandSectionPopUp(self, ButtonPosition):

        backRectangle = gestureCanvas.create_rectangle(
            610.0,
            170.0,
            741.0,
            341.0,
            fill="#F1ECEC",
            outline="")

        button_2 = Button(
            bg="#FFFFFF",
            text="Left Blink",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.ChangeButtonNamesGestures(ButtonPosition, Gestures.Gestures.LEFTBLINK),
                             button_2.destroy(),
                             button_3.destroy(), button_4.destroy(), button_5.destroy(),
                             gestureCanvas.delete(backRectangle)],
            relief="flat"
        )
        button_2.place(
            x=624.0,
            y=306.0,
            width=98.0,
            height=28.0
        )

        button_3 = Button(
            bg="#FFFFFF",
            text="Right Blink",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.ChangeButtonNamesGestures(ButtonPosition, Gestures.Gestures.RIGHTBLINK),
                             button_2.destroy(),
                             button_3.destroy(), button_4.destroy(), button_5.destroy(),
                             gestureCanvas.delete(backRectangle)],
            relief="flat"
        )
        button_3.place(
            x=624.0,
            y=264.0,
            width=98.0,
            height=28.0
        )

        button_4 = Button(
            bg="#FFFFFF",
            text="Both Eye Blink",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.ChangeButtonNamesGestures(ButtonPosition, Gestures.Gestures.BOTHEYEBLINK),
                             button_2.destroy(),
                             button_3.destroy(), button_4.destroy(), button_5.destroy(),
                             gestureCanvas.delete(backRectangle)],
            relief="flat"
        )
        button_4.place(
            x=624.0,
            y=220.0,
            width=98.0,
            height=28.0
        )

        button_5 = Button(
            bg="#FFFFFF",
            text="Mouth Open",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.ChangeButtonNamesGestures(ButtonPosition, Gestures.Gestures.MOUTHOPEN),
                             button_2.destroy(),
                             button_3.destroy(), button_4.destroy(), button_5.destroy(),
                             gestureCanvas.delete(backRectangle)],
            relief="flat"
        )
        button_5.place(
            x=624.0,
            y=177.0,
            width=98.0,
            height=28.0
        )

        gestureWindow.mainloop()

    def GesturePopUpPG(self):

        self.gestureThreadInstance.start()
        global gestureWindow, gestureCanvas

        gestureWindow = Tk()

        gestureWindow.geometry("961x539")
        gestureWindow.configure(bg="#FFFFFF")

        gestureCanvas = Canvas(
            gestureWindow,
            bg="#FFFFFF",
            height=539,
            width=961,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        gestureCanvas.place(x=0, y=0)
        image_image_1 = PhotoImage(
            file="assets/frame5/image_1.png")
        image_1 = gestureCanvas.create_image(
            480.0,
            301,
            image=image_image_1
        )

        button_image_1 = PhotoImage(
            file="assets/frame5/button_1.png")
        button_1 = Button(
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"), gestureWindow.destroy(), self.gestureThreadInstance.stop(),
                             self.gestureThreadInstance.join(),
                             self.VoicePopUpPG()],
            relief="flat"
        )
        button_1.place(
            x=794.0,
            y=410.0,
            width=40.0,
            height=20.0
        )

        doubleClick = Button(
            bg="#FFFFFF",
            text=self.Divider(self.gestureDoubleClick.value),
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.gestureThreadInstance.stop(), self.gestureThreadInstance.join(),
                             self.GestureCommandSectionPopUp(315)],
            relief="flat"
        )
        doubleClick.place(
            x=755.0,
            y=315.0,
            width=98.0,
            height=28.0
        )

        holdButton = Button(
            bg="#FFFFFF",
            text=self.Divider(self.gestureHold.value),
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.gestureThreadInstance.stop(), self.gestureThreadInstance.join(),
                             self.GestureCommandSectionPopUp(269)],
            relief="flat"
        )
        holdButton.place(
            x=755.0,
            y=269.0,
            width=98.0,
            height=28.0
        )

        leftClickButton = Button(
            bg="#FFFFFF",
            text=self.Divider(self.gestureLeftClick.value),
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.gestureThreadInstance.stop(), self.gestureThreadInstance.join(),
                             self.GestureCommandSectionPopUp(223)],
            relief="flat"
        )
        leftClickButton.place(
            x=755.0,
            y=223.0,
            width=98.0,
            height=28.0
        )

        rightClickButton = Button(
            bg="#FFFFFF",
            text=self.Divider(self.gestureRightClick.value),
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [self.gestureThreadInstance.stop(), self.gestureThreadInstance.join(),
                             self.GestureCommandSectionPopUp(177)],
            relief="flat"
        )
        rightClickButton.place(
            x=755.0,
            y=177.0,
            width=98.0,
            height=28.0
        )

        button_image_10 = PhotoImage(
            file="assets/frame5/button_10.png")
        button_10 = Button(
            image=button_image_10,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_10 clicked"), gestureWindow.destroy(), self.gestureThreadInstance.stop(),
                             self.gestureThreadInstance.join(),
                             self.VoicePopUpPG()],
            relief="flat"
        )
        button_10.place(
            x=792.0,
            y=122.0,
            width=40.0,
            height=20.0
        )
        gestureWindow.resizable(False, False)
        gestureWindow.mainloop()

    def ChangeButtonNamesVoice(self, buttonPosition, buttonText):

        while self.voice_thread.is_alive():
            print("kapanıyor")
            sleep(0.1)
        self.voice_thread.close()
        if buttonPosition == 171:
            self.voiceRightButtonName = buttonText
            self.voiceThreadInstance = VoicePart.VoiceDetection(rightVoice=self.voiceRightButtonName,
                                                                leftVoice=self.voiceLeftButtonName,
                                                                holdVoice=self.voiceHoldButtonName,
                                                                dropVoice=self.voiceDropButtonName,
                                                                doubleVoice=self.voiceDoubleClickButtonName)
            voice_thread = Process(target=self.voiceThreadInstance.start)
            voice_thread.start()
            print("tuş değişimi")

        elif buttonPosition == 217:
            self.voiceLeftButtonName = buttonText
            print("tuş değişimi")
        elif buttonPosition == 263:
            self.voiceHoldButtonName = buttonText
        elif buttonPosition == 309:
            self.voiceDropButtonName = buttonText
        elif buttonPosition == 355:
            self.voiceDoubleClickButtonName = buttonText

        self.voiceThreadInstance = VoicePart.VoiceDetection(rightVoice=self.voiceRightButtonName,
                                                            leftVoice=self.voiceLeftButtonName,
                                                            holdVoice=self.voiceHoldButtonName,
                                                            dropVoice=self.voiceDropButtonName,
                                                            doubleVoice=self.voiceDoubleClickButtonName)
        voice_thread = Process(target=self.voiceThreadInstance.start)
        voice_thread.start()

        button = Button(
            bg="#FFFFFF",
            text=buttonText,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [button.destroy(), self.voice_thread.kill(), self.VoiceChangeButton(buttonPosition)],
            relief="flat"
        )
        button.place(
            x=755,
            y=buttonPosition,
            width=98,
            height=28
        )

    def VoiceChangeButton(self, ButtonPosition):
        print("çağrıldı")
        voiceDetectionNew = VoicePart.VoiceDetection(rightVoice=self.voiceRightButtonName,
                                                     leftVoice=self.voiceLeftButtonName,
                                                     holdVoice=self.voiceHoldButtonName,
                                                     dropVoice=self.voiceDropButtonName,
                                                     doubleVoice=self.voiceDoubleClickButtonName)
        command = voiceDetectionNew.DetectVoice()
        print(command)
        self.ChangeButtonNamesVoice(ButtonPosition, command)

    def VoicePopUpPG(self):

        self.voice_thread.start()

        global voiceWindow, voiceCanvas, vButton_1, vButton_2, vButton_3, vButton_4, vButton_5

        voiceWindow = Tk()

        voiceWindow.geometry("961x539")
        voiceWindow.configure(bg="#FFFFFF")

        voiceCanvas = Canvas(
            voiceWindow,
            bg="#FFFFFF",
            height=539,
            width=961,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        voiceCanvas.place(x=0, y=0)
        image_image_1 = PhotoImage(
            file="assets/frame6/image_1.png")
        image_1 = voiceCanvas.create_image(
            480.0,
            299,
            image=image_image_1
        )

        vButton_1 = Button(
            bg="#FFFFFF",
            text=self.voiceRightButtonName,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"), vButton_1.destroy(), self.voice_thread.kill(),
                             self.VoiceChangeButton(171)],
            relief="flat"
        )
        vButton_1.place(
            x=755,
            y=171.0,
            width=100.0,
            height=32.0
        )

        vButton_2 = Button(
            text=self.voiceHoldButtonName,
            bg="#FFFFFF",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [vButton_2.destroy(), self.voice_thread.kill(), self.VoiceChangeButton(263)],
            relief="flat"
        )
        vButton_2.place(
            x=755,
            y=263.0,
            width=100.0,
            height=32.0
        )

        vButton_3 = Button(
            text=self.voiceDropButtonName,
            bg="#FFFFFF",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [vButton_3.destroy(), self.voice_thread.kill(), self.VoiceChangeButton(309)],
            relief="flat"
        )
        vButton_3.place(
            x=755,
            y=309.0,
            width=100.0,
            height=32.0
        )

        vButton_4 = Button(
            text=self.voiceLeftButtonName,
            bg="#FFFFFF",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [vButton_4.destroy(), self.voice_thread.kill(), self.VoiceChangeButton(217)],
            relief="flat"
        )
        vButton_4.place(
            x=755,
            y=217.0,
            width=100.0,
            height=32.0
        )

        vButton_5 = Button(
            text=self.voiceDoubleClickButtonName,
            bg="#FFFFFF",
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [vButton_5.destroy(), self.voice_thread.kill(), self.VoiceChangeButton(355)],
            relief="flat"
        )
        vButton_5.place(
            x=755,
            y=355,
            width=100.0,
            height=32.0
        )

        button_image_5 = PhotoImage(
            file="assets/frame6/button_5.png")
        button_5 = Button(
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_5 clicked"), self.voice_thread.kill(), self.voice_thread.join(),
                             voiceWindow.destroy(),
                             self.GesturePopUpPG()],
            relief="flat"
        )
        button_5.place(
            x=794.0,
            y=122.0,
            width=40.0,
            height=20.0
        )

        button_image_6 = PhotoImage(
            file="assets/frame6/button_6.png")
        button_6 = Button(
            image=button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_6 clicked"), self.voice_thread.kill(), self.voice_thread.join(),
                             voiceWindow.destroy(),
                             self.GesturePopUpPG()],
            relief="flat"
        )
        button_6.place(
            x=792.0,
            y=430.0,
            width=40.0,
            height=20.0
        )

        voiceWindow.resizable(False, False)
        voiceWindow.mainloop()

    def MoveHeadToRightPG(self):

        window = Tk()

        window.geometry("1186x563")
        window.configure(bg="#FFFFFF")

        canvas = Canvas(
            window,
            bg="#FFFFFF",
            height=563,
            width=1186,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)
        image_image_1 = PhotoImage(
            file="assets/frame2.1/image_1.png")
        image_1 = canvas.create_image(
            593.0,
            313,
            image=image_image_1
        )
        window.resizable(False, False)
        window.mainloop()

    def MoveHeadToLeftPG(self):

        window = Tk()

        window.geometry("1186x563")
        window.configure(bg="#FFFFFF")

        canvas = Canvas(
            window,
            bg="#FFFFFF",
            height=563,
            width=1186,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)
        image_image_1 = PhotoImage(
            file="assets/frame2.2/image_1.png")
        image_1 = canvas.create_image(
            593.0,
            313,
            image=image_image_1
        )
        window.resizable(False, False)
        window.mainloop()

    def CloseRightEyePG(self):

        window = Tk()

        window.geometry("1186x563")
        window.configure(bg="#FFFFFF")

        canvas = Canvas(
            window,
            bg="#FFFFFF",
            height=563,
            width=1186,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)
        image_image_1 = PhotoImage(
            file="assets/frame0/image_1.png")
        image_1 = canvas.create_image(
            593.0,
            313,
            image=image_image_1
        )

        image_image_2 = PhotoImage(
            file="assets/frame0/image_2.png")
        image_2 = canvas.create_image(
            603.0,
            398.99999999999994,
            image=image_image_2
        )
        window.resizable(False, False)
        window.mainloop()

    def CloseLeftEyePG(self):

        window = Tk()

        window.geometry("1186x563")
        window.configure(bg="#FFFFFF")

        canvas = Canvas(
            window,
            bg="#FFFFFF",
            height=563,
            width=1186,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)
        image_image_1 = PhotoImage(
            file="assets/frame1/image_1.png")
        image_1 = canvas.create_image(
            593.0,
            313,
            image=image_image_1
        )
        image_image_2 = PhotoImage(
            file="assets/frame1/image_2.png")

        image_2 = canvas.create_image(
            603.0,
            398.0,
            image=image_image_2
        )

        window.resizable(False, False)
        window.mainloop()
